***********
SO3vecArr
***********


An ``SO3vecArr`` is a multidimensional array of ``SO3vec`` objects. 
On the backend, the ``SO3vecArr`` is stored as a list of ``GElib::SO3partArray`` 
objects, however logically it is accessible as a single array of ``SO3vec`` objects. 

.. code-block:: python

 >>> A=SO3vecArr.gaussian([2,2],[2,2])
 >>> print(A)
 Cell (0,0)
 [ (-1.23974,-0.653697) (-0.407472,-0.645572) ]


 Cell (0,1)
 [ (-1.50279,0.0436305) (0.570759,-1.11315) ]


 Cell (1,0)
 [ (-1.13769,0.682072) (-1.22027,-0.711608) ]


 Cell (1,1)
 [ (-1.20183,0.967431) (-0.399454,-0.438438) ]



 Cell (0,0)
 [ (-0.056168,0.275777) (0.806889,0.904426) ]
 [ (-0.219183,-0.0361725) (0.89997,-0.709382) ]
 [ (0.842292,-0.53226) (-1.56131,-0.502227) ]


 Cell (0,1)
 [ (0.208035,0.584081) (-1.56208,0.93446) ]
 [ (-0.580622,-0.584194) (-1.7287,-0.410793) ]
 [ (0.612628,-1.36454) (0.183707,-0.0820907) ]


 Cell (1,0)
 [ (0.961059,-1.04125) (0.759261,-0.580733) ]
 [ (-0.14398,0.778008) (-1.72331,0.775277) ]
 [ (-1.3533,1.23033) (0.766929,-0.253007) ]


 Cell (1,1)
 [ (-0.815133,0.185932) (0.798354,1.65059) ]
 [ (1.77056,0.611322) (1.05485,-1.55657) ]
 [ (-1.71069,0.500273) (-0.460123,1.38648) ]


.. code-block:: python

 >>> adims=A.get_adims()
 >>> print(adims)
 (2,2)
 >>> print(A.type())
 (2,2)


=====================
Access and arithmetic
=====================

.. code-block:: python

 >>> A=SO3partArr.gaussian([2,2],2,2)
 >>> B=SO3partArr.gaussian([2,2],2,2)
 >>> C=A+3.0*B


.. code-block:: python

 >>> a=A.get_cell([0,1])
 >>> print(a)
 Part l=0:
   [ (-1.50279,0.0436305) (0.570759,-1.11315) ]
 
 Part l=1:
   [ (0.208035,0.584081) (-1.56208,0.93446) ]
   [ (-0.580622,-0.584194) (-1.7287,-0.410793) ]
   [ (0.612628,-1.36454) (0.183707,-0.0820907) ]

 
.. code-block:: python

 >>> v=SO3vec.ones([2,2])
 >>> A[0,1]=v
 >>> print(A)
 Cell (0,0)
 [ (-1.23974,-0.653697) (-0.407472,-0.645572) ]


 Cell (0,1)
 [ (1,0) (1,0) ]


 Cell (1,0)
 [ (-1.13769,0.682072) (-1.22027,-0.711608) ]


 Cell (1,1)
 [ (-1.20183,0.967431) (-0.399454,-0.438438) ]



 Cell (0,0)
 [ (-0.056168,0.275777) (0.806889,0.904426) ]
 [ (-0.219183,-0.0361725) (0.89997,-0.709382) ]
 [ (0.842292,-0.53226) (-1.56131,-0.502227) ]


 Cell (0,1)
 [ (1,0) (1,0) ]
 [ (1,0) (1,0) ]
 [ (1,0) (1,0) ]


 Cell (1,0)
 [ (0.961059,-1.04125) (0.759261,-0.580733) ]
 [ (-0.14398,0.778008) (-1.72331,0.775277) ]
 [ (-1.3533,1.23033) (0.766929,-0.253007) ]


 Cell (1,1)
 [ (-0.815133,0.185932) (0.798354,1.65059) ]
 [ (1.77056,0.611322) (1.05485,-1.55657) ]
 [ (-1.71069,0.500273) (-0.460123,1.38648) ]

.. code-block:: python

 >>> B=SO3partArr.ones([2,2],1,2)
 >>> V.set_part(1,B)


